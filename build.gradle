//
//
//   Copyright 2019-2023  SenX S.A.S.
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU Affero General Public License as
//   published by the Free Software Foundation, either version 3 of the
//   License, or (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU Affero General Public License for more details.
//
//   You should have received a copy of the GNU Affero General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

project.group = 'io.warp10'
project.description = 'WarpScriptâ„¢ PMML Extension'
project.version = getVersionFromGit()
//
// Repositories for the project dependencies
//

repositories {
    mavenCentral()
}

configurations {
    provided
}

//
// Dependencies of the project
//
dependencies {
  compileOnly 'io.warp10:warpscript:+'

  //
  // Insert your dependencies here
  //
  //compile group: 'GROUP', name: 'NAME', version: 'VERSION'
  implementation group: 'org.jpmml', name: 'pmml-evaluator', version: '1.4.6'

  testImplementation 'io.warp10:warpscript:+'
  testImplementation 'junit:junit:4.12'
}

test {
  useJUnit()
}

sourceSets {
  main {
    compileClasspath = compileClasspath + configurations.provided
  }
}

eclipse.classpath.plusConfigurations += [configurations.provided]  // Eclipse users only

// for IntelliJ users
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }
}

shadowJar {
    classifier = ''

    manifest {
        attributes('WarpFleet-Description': project.description)
        attributes('WarpFleet-Group': project.group)
        attributes('WarpFleet-Artifact': project.name)
        attributes('WarpFleet-Version': project.version)
    }

    from('src/main/warpscript') {
        //
        // Only consider macros which are in our namespace
        //
        include project.group + '/' + project.name + '/*.mc2'
        include project.group + '/' + project.name + '/**/*.mc2'
    }

    from('.') {
        include 'README.md'
        include project.group + '-' + project.name + '.conf'
    }

    dependencies {
        exclude(dependency('org.slf4j::'))
    }
}

shadowJar.dependsOn(test)

//
// Maven related config
//
publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version = project.version
            from components.java
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }
        uberJar(MavenPublication) {
            groupId project.group
            artifactId project.name
            artifact(shadowJar)
            artifact(tasks['javadocJar'])
            artifact(tasks['sourcesJar'])
            version = project.version + '-uberjar'

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/senx/' + project.name

                scm {
                    connection = 'scm:git:git://github.com/senx/' + project.name
                    developerConnection = 'scm:git:ssh://github.com/senx/' + project.name
                    url = 'https://github.com/senx/' + project.name
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
            }
        }
    }

    repositories {
        if (project.hasProperty('ossrhUsername')) {
            maven {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        if (project.hasProperty('nexusUsername')) {
            maven {
                name 'nexus'
                allowInsecureProtocol true
                url "$nexusHost/repository/maven-releases/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
}

artifacts {
    archives shadowJar, javadocJar, sourcesJar
}

if (project.hasProperty('ossrhUsername')) {
    nexusStaging {
        packageGroup = 'io.warp10'
        username ossrhUsername
        password ossrhPassword
    }
}

//
// Artifact Signing
//
if (project.hasProperty('signing.gnupg.keyName')) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
}

def getVersionFromGit() {
  def nogit = System.getProperty("nogit")
  if (null != nogit) {
    // Override version with the property value. To remove the version altogether use '-Dnogit' without value.
    return nogit
  } else {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
}
